from enum import Enum
from typing import Any, Dict, Optional

class Term(Enum):
    FIRST: str = ...
    SECOND: str = ...
    SUMMER: str = ...

class Semester:
    year: int
    term: Term
    def __init__(self, year: Any, term: Any) -> None: ...

class Department:
    uuid: str
    name: str
    def __init__(self, uuid: Any, name: Any) -> None: ...

class DegreeType:
    uuid: str
    zh_name: str
    en_name: str
    def __init__(self, uuid: Any, zh_name: Any, en_name: Any) -> None: ...

class CourseCategory:
    code: str = ...
    name: str = ...
    def __init__(self, code: Any, name: Any) -> None: ...

class College:
    code: str = ...
    name: str = ...
    def __init__(self, code: Any, name: Any) -> None: ...

class Course:
    course_id: Optional[str] = ...
    info: Optional[Dict[str, str]] = ...
    tags: Dict[str, Any] = ...
    def dump(self) -> str: ...
    def __init__(self, course_id: Any, info: Any, tags: Any) -> None: ...
